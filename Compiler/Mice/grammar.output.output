Terminals unused in grammar

   "$"
   ";"
   ":="
   ","
   "&"
   THEN
   ">"
   "="
   "<"
   "+"
   "-"
   "*"
   "/"
   "("
   ")"


Grammar

    0 $accept: block $end

    1 block: declarations compound_statement '$'

    2 declarations: DECLARE declare_rest
    3             | /* empty */

    4 declare_rest: id data_type default ';' declare_rest
    5             | /* empty */

    6 default: ':' righthandside
    7        | /* empty */

    8 data_type: characters
    9          | numbers
   10          | BOOLEAN

   11 characters: CHAR

   12 size: num size_option
   13     | /* empty */

   14 size_option: ',' num
   15            | /* empty */

   16 numbers: NUMBER '(' size ')'
   17        | INT '(' size ')'
   18        | SMALLINT '(' size ')'
   19        | POSITIVE '(' size ')'

   20 compound_statement: BEGIN optional_statements END ';'

   21 optional_statements: NULL ';'
   22                    | statement_list

   23 statement_list: statement
   24               | statement_list ';' statement

   25 statement: lefthandside
   26          | compound_statement
   27          | DBMS_OUTPUT.PUT_LINE '(' id ')'
   28          | DBMS_OUTPUT.PUT '(' id ')'
   29          | DBMS_OUTPUT.NEWLINE
   30          | '&' id
   31          | IF expression LOOP statement END LOOP
   32          | WHILE expression LOOP statement END LOOP

   33 lefthandside: id ':' righthandside

   34 righthandside: expression
   35              | schar

   36 expression: simple_expression
   37           | simple_expression relop simple_expression

   38 simple_expression: term
   39                  | simple_expression addop term

   40 term: factor
   41     | term mulop factor

   42 factor: id
   43       | num
   44       | TRUE
   45       | FALSE
   46       | NULL
   47       | NOT factor

   48 relop: '>'
   49      | ">="
   50      | '='
   51      | "<="
   52      | '<'
   53      | "<>"

   54 addop: '+'
   55      | '-'

   56 mulop: '*'
   57      | '/'
   58      | MOD


Terminals, with rules where they appear

$end (0) 0
'$' (36) 1
'&' (38) 30
'(' (40) 16 17 18 19 27 28
')' (41) 16 17 18 19 27 28
'*' (42) 56
'+' (43) 54
',' (44) 14
'-' (45) 55
'/' (47) 57
':' (58) 6 33
';' (59) 4 20 21 24
'<' (60) 52
'=' (61) 50
'>' (62) 48
error (256)
"$" (258)
DECLARE (259) 2
id (260) 4 27 28 30 33 42
";" (261)
":=" (262)
BOOLEAN (263) 10
CHAR (264) 11
num (265) 12 14 43
"," (266)
NUMBER (267) 16
INT (268) 17
SMALLINT (269) 18
POSITIVE (270) 19
BEGIN (271) 20
END (272) 20 31 32
NULL (273) 21 46
DBMS_OUTPUT.PUT_LINE (274) 27
DBMS_OUTPUT.PUT (275) 28
DBMS_OUTPUT.NEWLINE (276) 29
"&" (277)
IF (278) 31
THEN (279)
WHILE (280) 32
LOOP (281) 31 32
schar (282) 35
TRUE (283) 44
FALSE (284) 45
NOT (285) 47
">" (286)
">=" (287) 49
"=" (288)
"<=" (289) 51
"<" (290)
"<>" (291) 53
"+" (292)
"-" (293)
"*" (294)
"/" (295)
MOD (296) 58
"(" (297)
")" (298)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
block (59)
    on left: 1, on right: 0
declarations (60)
    on left: 2 3, on right: 1
declare_rest (61)
    on left: 4 5, on right: 2 4
default (62)
    on left: 6 7, on right: 4
data_type (63)
    on left: 8 9 10, on right: 4
characters (64)
    on left: 11, on right: 8
size (65)
    on left: 12 13, on right: 16 17 18 19
size_option (66)
    on left: 14 15, on right: 12
numbers (67)
    on left: 16 17 18 19, on right: 9
compound_statement (68)
    on left: 20, on right: 1 26
optional_statements (69)
    on left: 21 22, on right: 20
statement_list (70)
    on left: 23 24, on right: 22 24
statement (71)
    on left: 25 26 27 28 29 30 31 32, on right: 23 24 31 32
lefthandside (72)
    on left: 33, on right: 25
righthandside (73)
    on left: 34 35, on right: 6 33
expression (74)
    on left: 36 37, on right: 31 32 34
simple_expression (75)
    on left: 38 39, on right: 36 37 39
term (76)
    on left: 40 41, on right: 38 39 41
factor (77)
    on left: 42 43 44 45 46 47, on right: 40 41 47
relop (78)
    on left: 48 49 50 51 52 53, on right: 37
addop (79)
    on left: 54 55, on right: 39
mulop (80)
    on left: 56 57 58, on right: 41


state 0

    0 $accept: . block $end

    DECLARE  shift, and go to state 1

    $default  reduce using rule 3 (declarations)

    block         go to state 2
    declarations  go to state 3


state 1

    2 declarations: DECLARE . declare_rest

    id  shift, and go to state 4

    $default  reduce using rule 5 (declare_rest)

    declare_rest  go to state 5


state 2

    0 $accept: block . $end

    $end  shift, and go to state 6


state 3

    1 block: declarations . compound_statement '$'

    BEGIN  shift, and go to state 7

    compound_statement  go to state 8


state 4

    4 declare_rest: id . data_type default ';' declare_rest

    BOOLEAN   shift, and go to state 9
    CHAR      shift, and go to state 10
    NUMBER    shift, and go to state 11
    INT       shift, and go to state 12
    SMALLINT  shift, and go to state 13
    POSITIVE  shift, and go to state 14

    data_type   go to state 15
    characters  go to state 16
    numbers     go to state 17


state 5

    2 declarations: DECLARE declare_rest .

    $default  reduce using rule 2 (declarations)


state 6

    0 $accept: block $end .

    $default  accept


state 7

   20 compound_statement: BEGIN . optional_statements END ';'

    id                    shift, and go to state 18
    BEGIN                 shift, and go to state 7
    NULL                  shift, and go to state 19
    DBMS_OUTPUT.PUT_LINE  shift, and go to state 20
    DBMS_OUTPUT.PUT       shift, and go to state 21
    DBMS_OUTPUT.NEWLINE   shift, and go to state 22
    IF                    shift, and go to state 23
    WHILE                 shift, and go to state 24
    '&'                   shift, and go to state 25

    compound_statement   go to state 26
    optional_statements  go to state 27
    statement_list       go to state 28
    statement            go to state 29
    lefthandside         go to state 30


state 8

    1 block: declarations compound_statement . '$'

    '$'  shift, and go to state 31


state 9

   10 data_type: BOOLEAN .

    $default  reduce using rule 10 (data_type)


state 10

   11 characters: CHAR .

    $default  reduce using rule 11 (characters)


state 11

   16 numbers: NUMBER . '(' size ')'

    '('  shift, and go to state 32


state 12

   17 numbers: INT . '(' size ')'

    '('  shift, and go to state 33


state 13

   18 numbers: SMALLINT . '(' size ')'

    '('  shift, and go to state 34


state 14

   19 numbers: POSITIVE . '(' size ')'

    '('  shift, and go to state 35


state 15

    4 declare_rest: id data_type . default ';' declare_rest

    ':'  shift, and go to state 36

    $default  reduce using rule 7 (default)

    default  go to state 37


state 16

    8 data_type: characters .

    $default  reduce using rule 8 (data_type)


state 17

    9 data_type: numbers .

    $default  reduce using rule 9 (data_type)


state 18

   33 lefthandside: id . ':' righthandside

    ':'  shift, and go to state 38


state 19

   21 optional_statements: NULL . ';'

    ';'  shift, and go to state 39


state 20

   27 statement: DBMS_OUTPUT.PUT_LINE . '(' id ')'

    '('  shift, and go to state 40


state 21

   28 statement: DBMS_OUTPUT.PUT . '(' id ')'

    '('  shift, and go to state 41


state 22

   29 statement: DBMS_OUTPUT.NEWLINE .

    $default  reduce using rule 29 (statement)


state 23

   31 statement: IF . expression LOOP statement END LOOP

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    expression         go to state 48
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51


state 24

   32 statement: WHILE . expression LOOP statement END LOOP

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    expression         go to state 52
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51


state 25

   30 statement: '&' . id

    id  shift, and go to state 53


state 26

   26 statement: compound_statement .

    $default  reduce using rule 26 (statement)


state 27

   20 compound_statement: BEGIN optional_statements . END ';'

    END  shift, and go to state 54


state 28

   22 optional_statements: statement_list .
   24 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 55

    $default  reduce using rule 22 (optional_statements)


state 29

   23 statement_list: statement .

    $default  reduce using rule 23 (statement_list)


state 30

   25 statement: lefthandside .

    $default  reduce using rule 25 (statement)


state 31

    1 block: declarations compound_statement '$' .

    $default  reduce using rule 1 (block)


state 32

   16 numbers: NUMBER '(' . size ')'

    num  shift, and go to state 56

    $default  reduce using rule 13 (size)

    size  go to state 57


state 33

   17 numbers: INT '(' . size ')'

    num  shift, and go to state 56

    $default  reduce using rule 13 (size)

    size  go to state 58


state 34

   18 numbers: SMALLINT '(' . size ')'

    num  shift, and go to state 56

    $default  reduce using rule 13 (size)

    size  go to state 59


state 35

   19 numbers: POSITIVE '(' . size ')'

    num  shift, and go to state 56

    $default  reduce using rule 13 (size)

    size  go to state 60


state 36

    6 default: ':' . righthandside

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    schar  shift, and go to state 61
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    righthandside      go to state 62
    expression         go to state 63
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51


state 37

    4 declare_rest: id data_type default . ';' declare_rest

    ';'  shift, and go to state 64


state 38

   33 lefthandside: id ':' . righthandside

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    schar  shift, and go to state 61
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    righthandside      go to state 65
    expression         go to state 63
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51


state 39

   21 optional_statements: NULL ';' .

    $default  reduce using rule 21 (optional_statements)


state 40

   27 statement: DBMS_OUTPUT.PUT_LINE '(' . id ')'

    id  shift, and go to state 66


state 41

   28 statement: DBMS_OUTPUT.PUT '(' . id ')'

    id  shift, and go to state 67


state 42

   42 factor: id .

    $default  reduce using rule 42 (factor)


state 43

   43 factor: num .

    $default  reduce using rule 43 (factor)


state 44

   46 factor: NULL .

    $default  reduce using rule 46 (factor)


state 45

   44 factor: TRUE .

    $default  reduce using rule 44 (factor)


state 46

   45 factor: FALSE .

    $default  reduce using rule 45 (factor)


state 47

   47 factor: NOT . factor

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    factor  go to state 68


state 48

   31 statement: IF expression . LOOP statement END LOOP

    LOOP  shift, and go to state 69


state 49

   36 expression: simple_expression .
   37           | simple_expression . relop simple_expression
   39 simple_expression: simple_expression . addop term

    ">="  shift, and go to state 70
    "<="  shift, and go to state 71
    "<>"  shift, and go to state 72
    '>'   shift, and go to state 73
    '='   shift, and go to state 74
    '<'   shift, and go to state 75
    '+'   shift, and go to state 76
    '-'   shift, and go to state 77

    $default  reduce using rule 36 (expression)

    relop  go to state 78
    addop  go to state 79


state 50

   38 simple_expression: term .
   41 term: term . mulop factor

    MOD  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 38 (simple_expression)

    mulop  go to state 83


state 51

   40 term: factor .

    $default  reduce using rule 40 (term)


state 52

   32 statement: WHILE expression . LOOP statement END LOOP

    LOOP  shift, and go to state 84


state 53

   30 statement: '&' id .

    $default  reduce using rule 30 (statement)


state 54

   20 compound_statement: BEGIN optional_statements END . ';'

    ';'  shift, and go to state 85


state 55

   24 statement_list: statement_list ';' . statement

    id                    shift, and go to state 18
    BEGIN                 shift, and go to state 7
    DBMS_OUTPUT.PUT_LINE  shift, and go to state 20
    DBMS_OUTPUT.PUT       shift, and go to state 21
    DBMS_OUTPUT.NEWLINE   shift, and go to state 22
    IF                    shift, and go to state 23
    WHILE                 shift, and go to state 24
    '&'                   shift, and go to state 25

    compound_statement  go to state 26
    statement           go to state 86
    lefthandside        go to state 30


state 56

   12 size: num . size_option

    ','  shift, and go to state 87

    $default  reduce using rule 15 (size_option)

    size_option  go to state 88


state 57

   16 numbers: NUMBER '(' size . ')'

    ')'  shift, and go to state 89


state 58

   17 numbers: INT '(' size . ')'

    ')'  shift, and go to state 90


state 59

   18 numbers: SMALLINT '(' size . ')'

    ')'  shift, and go to state 91


state 60

   19 numbers: POSITIVE '(' size . ')'

    ')'  shift, and go to state 92


state 61

   35 righthandside: schar .

    $default  reduce using rule 35 (righthandside)


state 62

    6 default: ':' righthandside .

    $default  reduce using rule 6 (default)


state 63

   34 righthandside: expression .

    $default  reduce using rule 34 (righthandside)


state 64

    4 declare_rest: id data_type default ';' . declare_rest

    id  shift, and go to state 4

    $default  reduce using rule 5 (declare_rest)

    declare_rest  go to state 93


state 65

   33 lefthandside: id ':' righthandside .

    $default  reduce using rule 33 (lefthandside)


state 66

   27 statement: DBMS_OUTPUT.PUT_LINE '(' id . ')'

    ')'  shift, and go to state 94


state 67

   28 statement: DBMS_OUTPUT.PUT '(' id . ')'

    ')'  shift, and go to state 95


state 68

   47 factor: NOT factor .

    $default  reduce using rule 47 (factor)


state 69

   31 statement: IF expression LOOP . statement END LOOP

    id                    shift, and go to state 18
    BEGIN                 shift, and go to state 7
    DBMS_OUTPUT.PUT_LINE  shift, and go to state 20
    DBMS_OUTPUT.PUT       shift, and go to state 21
    DBMS_OUTPUT.NEWLINE   shift, and go to state 22
    IF                    shift, and go to state 23
    WHILE                 shift, and go to state 24
    '&'                   shift, and go to state 25

    compound_statement  go to state 26
    statement           go to state 96
    lefthandside        go to state 30


state 70

   49 relop: ">=" .

    $default  reduce using rule 49 (relop)


state 71

   51 relop: "<=" .

    $default  reduce using rule 51 (relop)


state 72

   53 relop: "<>" .

    $default  reduce using rule 53 (relop)


state 73

   48 relop: '>' .

    $default  reduce using rule 48 (relop)


state 74

   50 relop: '=' .

    $default  reduce using rule 50 (relop)


state 75

   52 relop: '<' .

    $default  reduce using rule 52 (relop)


state 76

   54 addop: '+' .

    $default  reduce using rule 54 (addop)


state 77

   55 addop: '-' .

    $default  reduce using rule 55 (addop)


state 78

   37 expression: simple_expression relop . simple_expression

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    simple_expression  go to state 97
    term               go to state 50
    factor             go to state 51


state 79

   39 simple_expression: simple_expression addop . term

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    term    go to state 98
    factor  go to state 51


state 80

   58 mulop: MOD .

    $default  reduce using rule 58 (mulop)


state 81

   56 mulop: '*' .

    $default  reduce using rule 56 (mulop)


state 82

   57 mulop: '/' .

    $default  reduce using rule 57 (mulop)


state 83

   41 term: term mulop . factor

    id     shift, and go to state 42
    num    shift, and go to state 43
    NULL   shift, and go to state 44
    TRUE   shift, and go to state 45
    FALSE  shift, and go to state 46
    NOT    shift, and go to state 47

    factor  go to state 99


state 84

   32 statement: WHILE expression LOOP . statement END LOOP

    id                    shift, and go to state 18
    BEGIN                 shift, and go to state 7
    DBMS_OUTPUT.PUT_LINE  shift, and go to state 20
    DBMS_OUTPUT.PUT       shift, and go to state 21
    DBMS_OUTPUT.NEWLINE   shift, and go to state 22
    IF                    shift, and go to state 23
    WHILE                 shift, and go to state 24
    '&'                   shift, and go to state 25

    compound_statement  go to state 26
    statement           go to state 100
    lefthandside        go to state 30


state 85

   20 compound_statement: BEGIN optional_statements END ';' .

    $default  reduce using rule 20 (compound_statement)


state 86

   24 statement_list: statement_list ';' statement .

    $default  reduce using rule 24 (statement_list)


state 87

   14 size_option: ',' . num

    num  shift, and go to state 101


state 88

   12 size: num size_option .

    $default  reduce using rule 12 (size)


state 89

   16 numbers: NUMBER '(' size ')' .

    $default  reduce using rule 16 (numbers)


state 90

   17 numbers: INT '(' size ')' .

    $default  reduce using rule 17 (numbers)


state 91

   18 numbers: SMALLINT '(' size ')' .

    $default  reduce using rule 18 (numbers)


state 92

   19 numbers: POSITIVE '(' size ')' .

    $default  reduce using rule 19 (numbers)


state 93

    4 declare_rest: id data_type default ';' declare_rest .

    $default  reduce using rule 4 (declare_rest)


state 94

   27 statement: DBMS_OUTPUT.PUT_LINE '(' id ')' .

    $default  reduce using rule 27 (statement)


state 95

   28 statement: DBMS_OUTPUT.PUT '(' id ')' .

    $default  reduce using rule 28 (statement)


state 96

   31 statement: IF expression LOOP statement . END LOOP

    END  shift, and go to state 102


state 97

   37 expression: simple_expression relop simple_expression .
   39 simple_expression: simple_expression . addop term

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77

    $default  reduce using rule 37 (expression)

    addop  go to state 79


state 98

   39 simple_expression: simple_expression addop term .
   41 term: term . mulop factor

    MOD  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 39 (simple_expression)

    mulop  go to state 83


state 99

   41 term: term mulop factor .

    $default  reduce using rule 41 (term)


state 100

   32 statement: WHILE expression LOOP statement . END LOOP

    END  shift, and go to state 103


state 101

   14 size_option: ',' num .

    $default  reduce using rule 14 (size_option)


state 102

   31 statement: IF expression LOOP statement END . LOOP

    LOOP  shift, and go to state 104


state 103

   32 statement: WHILE expression LOOP statement END . LOOP

    LOOP  shift, and go to state 105


state 104

   31 statement: IF expression LOOP statement END LOOP .

    $default  reduce using rule 31 (statement)


state 105

   32 statement: WHILE expression LOOP statement END LOOP .

    $default  reduce using rule 32 (statement)
